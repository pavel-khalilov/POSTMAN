{
	"info": {
		"_postman_id": "d60d4f09-0765-41c7-806c-6e75bf198363",
		"name": "VADIM GROUP_33 HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13601290"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// проверка что body имеет тип данных строка(string). \"Body matches string... просто комментарий\r",
							"pm.test(\"Body matches string.\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							"\r",
							"// проверка что в body приходит что ожидалось, т.е. в pm.response.to.have.body указываем что ожидалось. \"Body is correct... это просто комментарий\r",
							"pm.test(\"Body is correct - This is the first responce from server!ss\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"2. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// прежде чем что-то запрашивать нужно создать переменную\r",
							"// 3. Спарсить response body в json\r",
							"var jsonData = pm.response.json(); \r",
							"//var-создаем переменную с именем jsonData, которая равна всему ответу(response) который равен json формату\r",
							"\r",
							"//Verifying NAME\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"var response_name = jsonData.name\r",
							"//var-создаем переменную с именем response_name, которая равна конкретному ключу name из ответа(response)\r",
							"\r",
							"console.log(\"Response name = \" + response_name)\r",
							"//выводим в консоль значение переменной response_name с комментарием \"Response name = \"\r",
							"\r",
							"pm.test(\"4. Matching response_name & request_name_manually\", function () {\r",
							"pm.expect(response_name).to.eql(\"Pavel\");\r",
							"});\r",
							"//\"Matching response_name & request_name\" - название теста, может быть любым, оно выводится во вкладке Test Result\r",
							"//pm.expect - проверяем, что значение переменной response_name равно тому, что указано в eql\r",
							"\r",
							"//Verifying AGE\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"var response_age = +jsonData.age\r",
							"//создаем переменную response_age(произвольное имя) которая будет равна значению age в ответе сервера из jsonData\r",
							"// знак + добавили для преобразования строки 38 в число 38\r",
							"\r",
							"console.log(\"Response age = \" + response_age)\r",
							"//выводим в консоль сообщение \"Response age=\" с данными от переменной response_age\r",
							"\r",
							"pm.test(\"5. Matching response_age & request_age_manually\", function () {\r",
							"pm.expect(response_age).to.eql(38);\r",
							"});\r",
							"\r",
							"//Verifying SALARY\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"var response_salary = jsonData.salary\r",
							"\r",
							"console.log(\"Response salary = $\" + response_salary)\r",
							"\r",
							"pm.test(\"6. Verifying manually salary to equal $5000\", function () {\r",
							"pm.expect(response_salary).to.eql(5000);\r",
							"});\r",
							"\r",
							"//PARSING REQUEST DATA\r",
							"// 7. Спарсить request.\r",
							"var request = request.data\r",
							"//создали переменную request с данными из тела(body) запроса в формате form-data\r",
							"console.log(\"Это данные из запроса:\", request)\r",
							"//Verifying NAME\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var request_name = request.name\r",
							"//можно сразу создать переменную с необходимыми данными, например var request_name = request.data.name\r",
							"\r",
							"console.log(\"Request name = \" + request_name)\r",
							"//выводим в консоль(смотрим) что в переменной request_name\r",
							"console.log(\"Response name = \" + response_name)\r",
							"\r",
							"pm.test(\"8. Matching name between request & response in dynamic\", function () {\r",
							"    pm.expect(response_name).to.eql(request_name);\r",
							"});\r",
							"\r",
							"//Verifying AGE\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var request_age = +request.age\r",
							"//можно сразу создать переменную с необходимыми данными, например var request_age = request.data.age\r",
							"\r",
							"pm.test(\"9. Matching age between request & response in dynamic\", function () {\r",
							"    pm.expect(response_age).to.eql(request_age);\r",
							"});\r",
							"\r",
							"console.log(\"Request age = \" + request_age)\r",
							"console.log(\"Response age = \" + response_age)\r",
							"\r",
							"//Verifying SALARY\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var request_salary = +request.salary\r",
							"\r",
							"pm.test(\"10. Matching salary between request & response in dynamic\", function () {\r",
							"pm.expect(response_salary).to.eql(request_salary);\r",
							"});\r",
							"\r",
							"console.log(\"Request salary = \" + request_salary)\r",
							"console.log(\"Response salary = \" + response_salary)\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"var response_family = jsonData.family\r",
							"console.log(\"Выводим данные по Family\" , response_family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var response_u_salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
							"pm.test(\"12. Verifying u_salary_1_5_year = salary*4\", function () {\r",
							"pm.expect(response_u_salary_1_5_year).to.eql(request_salary*4);\r",
							"});\r",
							"\r",
							"// 11111 забрать query-параметр height из url запроса\r",
							"// var request_queryData = pm.request.url.query.toObject()\r",
							"// console.log(\"request_queryData \",request_url.height)\r",
							"\r",
							"// 22222 забрать данные из тела запроса в raw(json) формате\r",
							"// var request_rawData = JSON.parse(pm.request.body.raw)\r",
							"// console.log(request_rawData.salary)\r",
							"\r",
							"// 33333 забрать данные из тела запроса в формате form-data\r",
							"// var request_formData = request.data\r",
							"// console.log(request_formData)\r",
							"\r",
							"// 44444 забрать данные из ответа в формате json\r",
							"// var response_jsonData = pm.response.json()\r",
							"// console.log(response_jsonData)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Pavel",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "height",
							"value": "178",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"2. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// ПРЕЖДЕ ЧЕМ ЧТО-ТО ЗАПРАШИВАТЬ СОЗДАЙ ПЕРЕМЕННУЮ!!!!!\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"var response_jsonData = pm.response.json(); \r",
							"//var-создаем переменную с именем jsonData, которая равна всему ответу(response) который равен json формату\r",
							"console.log(\"Ответ сервера:\", response_jsonData)\r",
							"\r",
							"// 4. Спарсить request\r",
							"var requestData = pm.request.url.query.toObject()\r",
							"//var-создаем переменную с именем requestData, в которую запишем все query-параметры из запроса\r",
							"console.log(\"Query-параметры в запросе:\",requestData)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request)\r",
							"var response_name = response_jsonData.name;\r",
							"var request_name = requestData.name;\r",
							"pm.test(\"5. Verifying response name equal to request name\", function () {\r",
							"pm.expect(response_name).to.eql(request_name);\r",
							"});\r",
							"console.log(\"Request name: \"+ request_name+\" = \"+response_name+\" : Response name\")\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age в request (age забрать из request)\r",
							"var request_age = requestData.age;\r",
							"var response_age = response_jsonData.age;\r",
							"pm.test(\"6. Verifying response age equal to request age\", function () {\r",
							"pm.expect(response_age).to.eql(request_age);\r",
							"});\r",
							"console.log(\"Request age : \"+ request_age + \" = \" + response_age + \" : Response age\");\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary в request (salary забрать из request)\r",
							"var response_salary = response_jsonData.salary;\r",
							"var request_salary = requestData.salary;\r",
							"pm.test(\"7. Verifying response salary equal to request salary\", function () {\r",
							"pm.expect(response_salary).to.eql(+request_salary);\r",
							"});\r",
							"console.log(\"Request salary : \"+ request_salary + \" = \" + response_salary + \" : Response salary\");\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response\r",
							"console.log(\"Family из ответа сервера: \", response_jsonData.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметр name\r",
							"var response_dogInfo = response_jsonData.family.pets.dog\r",
							"pm.test(\"9. Verifying Dog has name in response\", () => {\r",
							"  pm.expect(response_dogInfo).to.have.property(\"name\");\r",
							"   });\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"10. Verifying Dog has age in response\", () => {\r",
							"  pm.expect(response_dogInfo).to.have.property(\"age\");\r",
							"   });\r",
							"console.log(\"Dog info:\" , response_dogInfo)\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky\r",
							"var response_dog_name = response_jsonData.family.pets.dog.name;\r",
							"pm.test(\"11. Verifying dog name is Luky\", function () {\r",
							"    pm.expect(response_dog_name).to.eql(\"Luky\");\r",
							"});\r",
							"console.log(\"Dog name: \"+ response_dog_name)\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4\r",
							"var response_dog_age = response_jsonData.family.pets.dog.age;\r",
							"pm.test(\"12. Verifying dog age is 4\", function () {\r",
							"    pm.expect(response_dog_age).to.eql(4);\r",
							"});\r",
							"console.log(\"Dog age: \"+ response_dog_age)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Pavel&age=38&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Pavel"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		}
	]
}