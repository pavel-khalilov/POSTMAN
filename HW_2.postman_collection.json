{
	"info": {
		"_postman_id": "d60d4f09-0765-41c7-806c-6e75bf198363",
		"name": "VADIM GROUP_33 HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13601290"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200.\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// проверка что body имеет тип данных строка(string). \"Body matches string... просто комментарий\r",
							"pm.test(\"Body matches string.\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							"\r",
							"// проверка что в body приходит что ожидалось, т.е. в pm.response.to.have.body указываем что ожидалось. \"Body is correct... это просто комментарий\r",
							"pm.test(\"Body is correct - This is the first responce from server!ss\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"2. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// прежде чем что-то запрашивать нужно создать переменную\r",
							"// 3. Спарсить response body в json\r",
							"var jsonData = pm.response.json(); \r",
							"//var-создаем переменную с именем jsonData, которая равна всему ответу(response) который равен json формату\r",
							"\r",
							"//Verifying NAME\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"var response_name = jsonData.name\r",
							"//var-создаем переменную с именем response_name, которая равна конкретному ключу name из ответа(response)\r",
							"\r",
							"console.log(\"Response name = \" + response_name)\r",
							"//выводим в консоль значение переменной response_name с комментарием \"Response name = \"\r",
							"\r",
							"pm.test(\"4. Matching response_name & request_name_manually\", function () {\r",
							"pm.expect(response_name).to.eql(\"Pavel\");\r",
							"});\r",
							"//\"Matching response_name & request_name\" - название теста, может быть любым, оно выводится во вкладке Test Result\r",
							"//pm.expect - проверяем, что значение переменной response_name равно тому, что указано в eql\r",
							"\r",
							"//Verifying AGE\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"var response_age = +jsonData.age\r",
							"//создаем переменную response_age(произвольное имя) которая будет равна значению age в ответе сервера из jsonData\r",
							"// знак + добавили для преобразования строки 38 в число 38\r",
							"\r",
							"console.log(\"Response age = \" + response_age)\r",
							"//выводим в консоль сообщение \"Response age=\" с данными от переменной response_age\r",
							"\r",
							"pm.test(\"5. Matching response_age & request_age_manually\", function () {\r",
							"pm.expect(response_age).to.eql(38);\r",
							"});\r",
							"\r",
							"//Verifying SALARY\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"var response_salary = jsonData.salary\r",
							"\r",
							"console.log(\"Response salary = $\" + response_salary)\r",
							"\r",
							"pm.test(\"6. Verifying manually salary to equal $5000\", function () {\r",
							"pm.expect(response_salary).to.eql(5000);\r",
							"});\r",
							"\r",
							"//PARSING REQUEST DATA\r",
							"// 7. Спарсить request.\r",
							"var request = request.data\r",
							"//создали переменную request с данными из тела(body) запроса в формате form-data\r",
							"console.log(\"Это данные из запроса:\", request)\r",
							"//Verifying NAME\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"var request_name = request.name\r",
							"//можно сразу создать переменную с необходимыми данными, например var request_name = request.data.name\r",
							"\r",
							"console.log(\"Request name = \" + request_name)\r",
							"//выводим в консоль(смотрим) что в переменной request_name\r",
							"console.log(\"Response name = \" + response_name)\r",
							"\r",
							"pm.test(\"8. Matching name between request & response in dynamic\", function () {\r",
							"    pm.expect(response_name).to.eql(request_name);\r",
							"});\r",
							"\r",
							"//Verifying AGE\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"var request_age = +request.age\r",
							"//можно сразу создать переменную с необходимыми данными, например var request_age = request.data.age\r",
							"\r",
							"pm.test(\"9. Matching age between request & response in dynamic\", function () {\r",
							"    pm.expect(response_age).to.eql(request_age);\r",
							"});\r",
							"\r",
							"console.log(\"Request age = \" + request_age)\r",
							"console.log(\"Response age = \" + response_age)\r",
							"\r",
							"//Verifying SALARY\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var request_salary = +request.salary\r",
							"\r",
							"pm.test(\"10. Matching salary between request & response in dynamic\", function () {\r",
							"pm.expect(response_salary).to.eql(request_salary);\r",
							"});\r",
							"\r",
							"console.log(\"Request salary = \" + request_salary)\r",
							"console.log(\"Response salary = \" + response_salary)\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"var response_family = jsonData.family\r",
							"console.log(\"Выводим данные по Family\" , response_family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var response_u_salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
							"pm.test(\"12. Verifying u_salary_1_5_year = salary*4\", function () {\r",
							"pm.expect(response_u_salary_1_5_year).to.eql(request_salary*4);\r",
							"});\r",
							"\r",
							"// 11111 забрать query-параметр height из url запроса\r",
							"// var request_queryData = pm.request.url.query.toObject()\r",
							"// console.log(\"request_queryData \",request_url.height)\r",
							"\r",
							"// 22222 забрать данные из тела запроса в raw(json) формате\r",
							"// var request_rawData = JSON.parse(pm.request.body.raw)\r",
							"// console.log(request_rawData.salary)\r",
							"\r",
							"// 33333 забрать данные из тела запроса в формате form-data\r",
							"// var request_formData = request.data\r",
							"// console.log(request_formData)\r",
							"\r",
							"// 44444 забрать данные из ответа в формате json\r",
							"// var response_jsonData = pm.response.json()\r",
							"// console.log(response_jsonData)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Pavel",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "height",
							"value": "178",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"2. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// ПРЕЖДЕ ЧЕМ ЧТО-ТО ЗАПРАШИВАТЬ СОЗДАЙ ПЕРЕМЕННУЮ!!!!!\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"var response_jsonData = pm.response.json(); \r",
							"//var-создаем переменную с именем jsonData, которая равна всему ответу(response) который равен json формату\r",
							"console.log(\"#3 Ответ сервера:\", response_jsonData)\r",
							"\r",
							"// 4. Спарсить request\r",
							"var requestData = pm.request.url.query.toObject()\r",
							"//var-создаем переменную с именем requestData, в которую запишем все query-параметры из запроса\r",
							"console.log(\"#4 Query-параметры в запросе:\",requestData)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request)\r",
							"var response_name = response_jsonData.name;\r",
							"var request_name = requestData.name;\r",
							"pm.test(\"5. Verifying response name equal to request name\", function () {\r",
							"pm.expect(response_name).to.eql(request_name);\r",
							"});\r",
							"console.log(\"#5 Request name : \"+ request_name+\" = \"+response_name+\" : Response name\")\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age в request (age забрать из request)\r",
							"var request_age = requestData.age;\r",
							"var response_age = response_jsonData.age;\r",
							"pm.test(\"6. Verifying response age equal to request age\", function () {\r",
							"pm.expect(response_age).to.eql(request_age);\r",
							"});\r",
							"console.log(\"#6 Request age : \"+ request_age + \" = \" + response_age + \" : Response age\");\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary в request (salary забрать из request)\r",
							"var response_salary = response_jsonData.salary;\r",
							"var request_salary = requestData.salary;\r",
							"pm.test(\"7. Verifying response salary equal to request salary\", function () {\r",
							"pm.expect(response_salary).to.eql(+request_salary);\r",
							"});\r",
							"console.log(\"#7 Request salary : \"+ request_salary + \" = \" + response_salary + \" : Response salary\");\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response\r",
							"console.log(\"#8 Family из ответа сервера: \", response_jsonData.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметр name\r",
							"var response_dogInfo = response_jsonData.family.pets.dog\r",
							"pm.test(\"9. Verifying Dog has name in response\", () => {\r",
							"  pm.expect(response_dogInfo).to.have.property(\"name\");\r",
							"   });\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметр age\r",
							"pm.test(\"10.1 Verifying Dog has age in response\", () => {\r",
							"  pm.expect(response_dogInfo).to.have.property(\"age\");\r",
							"   });\r",
							"console.log(\"#10.1 Dog info:\" , response_dogInfo)\r",
							"// 10.2 Другой вариант проверки наличия параметра через логические true/false: если параметр есть в ответе, то в переменную запишется true, иначе false\r",
							"var response_has_dog_age = \"age\" in response_jsonData.family.pets.dog;\r",
							"// смотрим в консоле результат проверки\r",
							"console.log('#10.2 Другой вариант проверки наличия параметра age в dog через логические true/false. Dog has age:' , response_has_dog_age);\r",
							"// Заворачиваем проверку в тест(Test Result) в котором сравнивается \"слово\" true в expect(true) со значением переменной полученной при проверке ее наличия(т.е. там где этой переменной присваивается true или false)\r",
							"pm.test(\"10.2 Verifying Dog has age in response(булева проверка через true/false)\", function () {\r",
							"    pm.expect(true).to.eql(response_has_dog_age);\r",
							"});\r",
							"// Если true, то создаем другую переменную и присваиваем ей значение из response, иначе присваиваем undefined\r",
							"var resp_dog_age = response_has_dog_age ? response_jsonData.family.pets.dog.age : undefined;\r",
							"console.log('#10.2 Выводим значение age у dog, если такой параметр есть в response, т.е. true. Dog age is:', resp_dog_age)\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky\r",
							"var response_dog_name = response_jsonData.family.pets.dog.name;\r",
							"pm.test(\"11.1 Verifying dog name is Luky\", function () {\r",
							"    pm.expect(response_dog_name).to.eql(\"Luky\");\r",
							"});\r",
							"console.log(\"#11 Dog name is: \"+ response_dog_name)\r",
							"// Другой вариант проверки наличия значения в ключе\r",
							"pm.test(\"11.2 Verifying dog name is Luky\", function() {\r",
							"    pm.expect(pm.response.text()).to.include(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4\r",
							"var response_dog_age = response_jsonData.family.pets.dog.age;\r",
							"pm.test(\"12. Verifying dog age is 4\", function () {\r",
							"    pm.expect(response_dog_age).to.eql(4);\r",
							"});\r",
							"console.log(\"#12 Dog age is: \"+ response_dog_age)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Pavel&age=38&salary=5000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Pavel"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"2. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"var response_jsonData = pm.response.json()\r",
							"\r",
							"// 4. Спарсить request\r",
							"var request_queryData = pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request)\r",
							"var response_name = response_jsonData.name;\r",
							"var request_name = request_queryData.name;\r",
							"    pm.test(\"5. Verifying matching between request & response NAMEs\", function () {\r",
							"        pm.expect(response_name).to.eql(request_name);\r",
							"    });\r",
							"console.log(\"Response name : \"+ response_name + \" = \" + request_name + \" : Request name\")\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"var response_age = response_jsonData.age;\r",
							"var request_age = request_queryData.age;\r",
							"pm.test(\"6. Verifying matching between request & response AGEs\", function () {\r",
							"        pm.expect(response_age).to.eql(+request_age);\r",
							"    });\r",
							"console.log(\"Response age : \"+ response_age + \" = \" + request_age + \" : Request age\")\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request\r",
							"var request_salary = request_queryData.salary;\r",
							"console.log(\"Request salary: $\" + request_salary)\r",
							"// Выцепить query-параметр из запроса можно еще так:\r",
							"// var request_salary = pm.request.url.query.get(\"salary\")\r",
							"// console.log(\"Request salary: $\" + request_salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response\r",
							"var response_salary = response_jsonData.salary;\r",
							"console.log(\"Response salary: $\" + response_salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(\"1st response salary: $\" + response_salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(\"2nd response salary: $\" + response_salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(\"3rd response salary: $\" + response_salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"12. Verifying matching between 1st response salary & request salary\", function () {\r",
							"        pm.expect(response_salary[0]).to.eql(+request_salary);\r",
							"    });\r",
							"console.log(\"1st response salary : \"+ response_salary[0] + \" = \" + request_salary + \" : Request salary\")\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"13. Verifying 2nd response salary equal 2 x request salary\", function () {\r",
							"        pm.expect(+response_salary[1]).to.eql ( 2*request_salary);\r",
							"    });\r",
							"console.log(\"2nd response salary : \"+ response_salary[1] + \" = \" + 2*request_salary + \" : 2 x request salary\")\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test(\"14. Verifying 3rd response salary equal 3 x request salary\", function () {\r",
							"        pm.expect(+response_salary[2]).to.eql ( 3*request_salary);\r",
							"    });\r",
							"console.log(\"3rd response salary : \"+ response_salary[2] + \" = \" + 3*request_salary + \" : 3 x request salary\")\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\");\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\");\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\");\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", request_name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", request_age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", request_salary);\r",
							"\r",
							"// 21. *** Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Pavel&age=38&salary=5000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Pavel"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json\r",
							"var response_jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request\r",
							"var request_formData = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"8. Verifying response has start_qa_salary\", () => {\r",
							"  pm.expect(response_jsonData).to.have.property(\"start_qa_salary\");\r",
							"   });\r",
							"console.log(\"#8\",\"Start qa salary: $\"+ response_jsonData.start_qa_salary)\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"9. Verifying response has qa_salary_after_6_months\", () => {\r",
							"  pm.expect(response_jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"   });\r",
							"console.log(\"#9\",\"QA salary after 6 months: $\"+ response_jsonData.qa_salary_after_6_months)\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"10. Verifying response has qa_salary_after_12_months\", () => {\r",
							"  pm.expect(response_jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"   });\r",
							"console.log(\"#10\",\"QA salary after 12 months: $\"+ response_jsonData.qa_salary_after_12_months)\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"// var \r",
							"pm.test(\"11. Verifying response has qa_salary_after_1.5_year\", () => {\r",
							"  pm.expect(response_jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"   });\r",
							"console.log('#11',\"Qa salary after 1.5 year: $\" + response_jsonData['qa_salary_after_1.5_year'])\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"12. Verifying response has qa_salary_after_3.5_years\", () => {\r",
							"  pm.expect(response_jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"   });\r",
							"console.log('#12',\"Qa salary after 3.5 years: $\" + response_jsonData['qa_salary_after_3.5_years'])\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"13. Verifying response has person\", () => {\r",
							"  pm.expect(response_jsonData).to.have.property(\"person\");\r",
							"   });\r",
							"console.log(\"#13\",\"Person:\", response_jsonData.person)\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"var request_salary = request_formData.salary;\r",
							"var start_qa_salary = response_jsonData.start_qa_salary;\r",
							"pm.test(\"14. Verifying start qa salary equal to request salary\", function () {\r",
							"    pm.expect(start_qa_salary).to.eql(+request_salary);\r",
							"});\r",
							"console.log(\"#14\",\"Request salary : \" + \"$\" + request_salary + \" = \" + \"$\" + start_qa_salary + \" : Start qa salary\");\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"var qa_salary_after_6_months = response_jsonData.qa_salary_after_6_months;\r",
							"pm.test(\"15. Verifying 6 months qa salary equal to 2 x request salary\", function () {\r",
							"    pm.expect(qa_salary_after_6_months).to.eql(+ 2*request_salary);\r",
							"});\r",
							"console.log(\"#15\",\"6 months qa salary : \" + \"$\" + qa_salary_after_6_months + \" = \" + \"$\" + 2*request_salary + \" : 2 x request salary\");\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"var qa_salary_after_12_months = response_jsonData.qa_salary_after_12_months;\r",
							"pm.test(\"16. Verifying 12 months qa salary equal to 2.7 x request salary\", function () {\r",
							"    pm.expect(qa_salary_after_12_months).to.eql(+ 2.7*request_salary);\r",
							"});\r",
							"console.log(\"#16\",\"12 months qa salary : \" + \"$\" + qa_salary_after_12_months + \" = \" + \"$\" + 2.7*request_salary + \" : 2.7 x request salary\");\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"var qa_salary_after_1_5_year = response_jsonData['qa_salary_after_1.5_year'];\r",
							"pm.test(\"17. Verifying 1.5 year qa salary equal to 3.3 x request salary\", function () {\r",
							"    pm.expect(qa_salary_after_1_5_year).to.eql(+ 3.3*request_salary);\r",
							"});\r",
							"console.log(\"#17\",\"1.5 year qa salary : \" + \"$\" + qa_salary_after_1_5_year + \" = \" + \"$\" + 3.3*request_salary + \" : 3.3 x request salary\");\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"var qa_salary_after_3_5_years = response_jsonData[\"qa_salary_after_3.5_years\"];\r",
							"pm.test(\"18. Verifying 3.5 years qa salary equal to 3.8 x request salary\", function () {\r",
							"    pm.expect(qa_salary_after_3_5_years).to.eql(+ 3.8*request_salary);\r",
							"});\r",
							"console.log(\"#18\",\"3.5 years qa salary : \" + \"$\" + qa_salary_after_3_5_years + \" = \" + \"$\" + 3.8*request_salary + \" : 3.8 x request salary\");\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"var response_1_element_u_name = response_jsonData.person.u_name[1];\r",
							"pm.test(\"19. Verifying 1st element of u_name in person equal to request salary\", function () {\r",
							"        pm.expect(response_1_element_u_name).to.eql(+request_salary);\r",
							"});\r",
							"console.log(\"#19\",\"1st element of u_name : \" + \"$\" + response_1_element_u_name + \" = \" + \"$\" + request_salary + \" : request salary\")\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request)\r",
							"var request_age = request_formData.age;\r",
							"var response_u_age = response_jsonData.person.u_age;\r",
							"pm.test(\"20. Verifying response age matching to request age\", function () {\r",
							"        pm.expect(response_u_age).to.eql(+request_age);\r",
							"});\r",
							"console.log(\"#20\",\"Response age : \" + response_u_age + \" = \" + request_age + \" : Request age\")\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"var response_u_salary_5_years = response_jsonData.person.u_salary_5_years;\r",
							"pm.test(\"21. Verifying 5 years qa salary equal to 4.2 x request salary\", function () {\r",
							"        pm.expect(response_u_salary_5_years).to.eql(4.2*(+request_salary));\r",
							"});\r",
							"console.log(\"#21\",\"Response u salary 5 years : \" + response_u_salary_5_years + \" = \" + 4.2*(+request_salary) + \" : Request salary\")\r",
							"\r",
							"// 22. *** Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}